//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: API.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol MemoryIOReadCall: ClientCallUnary {}

fileprivate final class MemoryIOReadCallBase: ClientCallUnaryBase<MemoryReadRequest, MemoryReadResponse>, MemoryIOReadCall {
  override class var method: String { return "/MemoryIO/Read" }
}


/// Instantiate MemoryIOServiceClient, then call methods of this protocol to make API calls.
internal protocol MemoryIOService: ServiceClient {
  /// Synchronous. Unary.
  func read(_ request: MemoryReadRequest) throws -> MemoryReadResponse
  /// Asynchronous. Unary.
  func read(_ request: MemoryReadRequest, completion: @escaping (MemoryReadResponse?, CallResult) -> Void) throws -> MemoryIOReadCall

}

internal final class MemoryIOServiceClient: ServiceClientBase, MemoryIOService {
  /// Synchronous. Unary.
  internal func read(_ request: MemoryReadRequest) throws -> MemoryReadResponse {
    return try MemoryIOReadCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func read(_ request: MemoryReadRequest, completion: @escaping (MemoryReadResponse?, CallResult) -> Void) throws -> MemoryIOReadCall {
    return try MemoryIOReadCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol MemoryIOProvider: ServiceProvider {
  func read(request: MemoryReadRequest, session: MemoryIOReadSession) throws -> MemoryReadResponse
}

extension MemoryIOProvider {
  internal var serviceName: String { return "MemoryIO" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/MemoryIO/Read":
      return try MemoryIOReadSessionBase(
        handler: handler,
        providerBlock: { try self.read(request: $0, session: $1 as! MemoryIOReadSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol MemoryIOReadSession: ServerSessionUnary {}

fileprivate final class MemoryIOReadSessionBase: ServerSessionUnaryBase<MemoryReadRequest, MemoryReadResponse>, MemoryIOReadSession {}

